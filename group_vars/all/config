db_data_instance: wmdata
db_metadata_instance: worldmaplegacy
db_geonetwork_instance: geonetwork
db_user: worldmap
db_region: us-east-1
db_engine: postgres
db_instance_type: db.m4.xlarge
db_storage_type: gp2
db_multi_zone: yes
db_publicly_accessible: yes
db_data_size: 200
db_metadata_size: 10
db_geonetwork_size: 10
db_maint_window: mon:05:00-mon:06:00
db_backup_retention: 35
db_backup_window: 07:00-07:30
db_license_model: postgresql-license

# app_name should be a shorthand, lowercase, no spaces version of the
# application name since this variable will be used as a directory name
# Also, it would be the name of the branch in the worldmap repo. 
# For example worldmap, worldmap-legacy, master, feature1.
# The deployed service will be available at app_name.cga.terranodo.io
app_name: worldmap

# Django settings module to use when running Manage commands
# for example, txt2react.settings
main_module: geonode

# remote git repository to pull application code from, for example:
code_repository: http://github.com/cga-harvard/cga-worldmap.git

# name of the user created by the Fabric script that Ansible will use to
# handle server tasks
deploy_user: ubuntu

# server directory for the virtualenv that will be created to run the web app
virtualenv_dir: /home/{{deploy_user}}/venvs

# server directory to put the code into that is pulled from the code
# repository
app_code_dir: /home/{{deploy_user}}

# location of the requirements.txt flie in the code
requirements_file: "{{app_code_dir}}/requirements.txt"

# root domain name the server should run as. do not include a subdomain,
# for example, txt2react.com
site_url: "{{ app_name }}.cga.terranodo.io"

# Server name for nginx.
server_name: ~^(?P<subdomain>.+)\.cga\.terranodo\.io$
